package com.sqlite.northwindef.dao;

import com.sqldalmaker.DataStore;

import com.sqlite.northwindef.dto.Category;
import com.sqlite.northwindef.dto.Customer;
import com.sqlite.northwindef.dto.Employee;
import com.sqlite.northwindef.dto.EmployeesTerritory;
import com.sqlite.northwindef.dto.InternationalOrder;
import com.sqlite.northwindef.dto.Order;
import com.sqlite.northwindef.dto.OrderDetail;
import com.sqlite.northwindef.dto.PreviousEmployee;
import com.sqlite.northwindef.dto.Product;
import com.sqlite.northwindef.dto.Region;
import com.sqlite.northwindef.dto.Supplier;
import com.sqlite.northwindef.dto.Territory;
import java.util.ArrayList;
import java.util.List;

// Code generated by a tool. DO NOT EDIT.
// https://sqldalmaker.sourceforge.net/

public class Crud_All_Dao {

    protected final DataStore ds;

    public Crud_All_Dao(DataStore ds) {
        this.ds = ds;
    }

    /*
        (C)RUD: Categories
        Generated values are passed to DTO.
        Returns the number of affected rows or -1 on error.
     */
    public int createCategory(Category p) throws Exception {
        String sql = "insert into Categories (CategoryName, Description, Picture) values (?, ?, ?)";
        String[] gen_col_nm = new String[]{"CategoryID"};
        Object[] gen_values = new Object[gen_col_nm.length];
        int res = ds.insert(sql, gen_col_nm, gen_values, p.getCategoryName(), p.getDescription(), p.getPicture());
        p.setCategoryID(ds.castGeneratedValue(Integer.class, gen_values[0]));
        return res;
    }

    /*
        C(R)UD: Categories
     */
    public List<Category> readCategoryList() throws Exception {
        String sql = "select * from Categories";
        final List<Category> res = new ArrayList<Category>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Category obj = new Category();
                obj.setCategoryID(rd.getValue(Integer.class, "CategoryID"));  // t <- t
                obj.setCategoryName(rd.getValue(String.class, "CategoryName"));  // t <- t
                obj.setDescription(rd.getValue(String.class, "Description"));  // t <- t
                obj.setPicture(rd.getValue(byte[].class, "Picture"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: Categories
     */
    public Category readCategory(Integer categoryID) throws Exception {
        String sql = "select * from Categories where CategoryID=?";
        DataStore.RowData rd = ds.queryRow(sql, categoryID);
        Category obj = new Category();
        obj.setCategoryID(rd.getValue(Integer.class, "CategoryID"));  // t <- t
        obj.setCategoryName(rd.getValue(String.class, "CategoryName"));  // t <- t
        obj.setDescription(rd.getValue(String.class, "Description"));  // t <- t
        obj.setPicture(rd.getValue(byte[].class, "Picture"));  // t <- t
        return obj;
    }

    /*
        CR(U)D: Categories
        Returns the number of affected rows or -1 on error.
     */
    public int updateCategory(Category p) throws Exception {
        String sql = "update Categories set CategoryName=?, Description=?, Picture=? where CategoryID=?";
        return ds.execDML(sql, p.getCategoryName(), p.getDescription(), p.getPicture(), p.getCategoryID());
    }

    /*
        CR(U)D: Categories
        Returns the number of affected rows or -1 on error.
     */
    public int updateCategory(String categoryName, String description, byte[] picture, Integer categoryID) throws Exception {
        String sql = "update Categories set CategoryName=?, Description=?, Picture=? where CategoryID=?";
        return ds.execDML(sql, categoryName, description, picture, categoryID);
    }

    /*
        CRU(D): Categories
        Returns the number of affected rows or -1 on error.
     */
    public int deleteCategory(Integer categoryID) throws Exception {
        String sql = "delete from Categories where CategoryID=?";
        return ds.execDML(sql, categoryID);
    }

    /*
        (C)RUD: Customers
        Returns the number of affected rows or -1 on error.
     */
    public int createCustomer(Customer p) throws Exception {
        String sql = "insert into Customers (CustomerID, CompanyName, ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, Fax) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        return ds.execDML(sql, p.getCustomerID(), p.getCompanyName(), p.getContactName(), p.getContactTitle(), p.getAddress(), p.getCity(), p.getRegion(), p.getPostalCode(), p.getCountry(), p.getPhone(), p.getFax());
    }

    /*
        (C)RUD: Customers
        Returns the number of affected rows or -1 on error.
     */
    public int createCustomer(String customerID, String companyName, String contactName, String contactTitle, String address, String city, String region, String postalCode, String country, String phone, String fax) throws Exception {
        String sql = "insert into Customers (CustomerID, CompanyName, ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, Fax) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        return ds.execDML(sql, customerID, companyName, contactName, contactTitle, address, city, region, postalCode, country, phone, fax);
    }

    /*
        C(R)UD: Customers
     */
    public List<Customer> readCustomerList() throws Exception {
        String sql = "select * from Customers";
        final List<Customer> res = new ArrayList<Customer>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Customer obj = new Customer();
                obj.setCustomerID(rd.getValue(String.class, "CustomerID"));  // t <- t
                obj.setCompanyName(rd.getValue(String.class, "CompanyName"));  // t <- t
                obj.setContactName(rd.getValue(String.class, "ContactName"));  // t <- t
                obj.setContactTitle(rd.getValue(String.class, "ContactTitle"));  // t <- t
                obj.setAddress(rd.getValue(String.class, "Address"));  // t <- t
                obj.setCity(rd.getValue(String.class, "City"));  // t <- t
                obj.setRegion(rd.getValue(String.class, "Region"));  // t <- t
                obj.setPostalCode(rd.getValue(String.class, "PostalCode"));  // t <- t
                obj.setCountry(rd.getValue(String.class, "Country"));  // t <- t
                obj.setPhone(rd.getValue(String.class, "Phone"));  // t <- t
                obj.setFax(rd.getValue(String.class, "Fax"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: Customers
     */
    public Customer readCustomer(String customerID) throws Exception {
        String sql = "select * from Customers where CustomerID=?";
        DataStore.RowData rd = ds.queryRow(sql, customerID);
        Customer obj = new Customer();
        obj.setCustomerID(rd.getValue(String.class, "CustomerID"));  // t <- t
        obj.setCompanyName(rd.getValue(String.class, "CompanyName"));  // t <- t
        obj.setContactName(rd.getValue(String.class, "ContactName"));  // t <- t
        obj.setContactTitle(rd.getValue(String.class, "ContactTitle"));  // t <- t
        obj.setAddress(rd.getValue(String.class, "Address"));  // t <- t
        obj.setCity(rd.getValue(String.class, "City"));  // t <- t
        obj.setRegion(rd.getValue(String.class, "Region"));  // t <- t
        obj.setPostalCode(rd.getValue(String.class, "PostalCode"));  // t <- t
        obj.setCountry(rd.getValue(String.class, "Country"));  // t <- t
        obj.setPhone(rd.getValue(String.class, "Phone"));  // t <- t
        obj.setFax(rd.getValue(String.class, "Fax"));  // t <- t
        return obj;
    }

    /*
        CR(U)D: Customers
        Returns the number of affected rows or -1 on error.
     */
    public int updateCustomer(Customer p) throws Exception {
        String sql = "update Customers set CompanyName=?, ContactName=?, ContactTitle=?, Address=?, City=?, Region=?, PostalCode=?, Country=?, Phone=?, Fax=? where CustomerID=?";
        return ds.execDML(sql, p.getCompanyName(), p.getContactName(), p.getContactTitle(), p.getAddress(), p.getCity(), p.getRegion(), p.getPostalCode(), p.getCountry(), p.getPhone(), p.getFax(), p.getCustomerID());
    }

    /*
        CR(U)D: Customers
        Returns the number of affected rows or -1 on error.
     */
    public int updateCustomer(String companyName, String contactName, String contactTitle, String address, String city, String region, String postalCode, String country, String phone, String fax, String customerID) throws Exception {
        String sql = "update Customers set CompanyName=?, ContactName=?, ContactTitle=?, Address=?, City=?, Region=?, PostalCode=?, Country=?, Phone=?, Fax=? where CustomerID=?";
        return ds.execDML(sql, companyName, contactName, contactTitle, address, city, region, postalCode, country, phone, fax, customerID);
    }

    /*
        CRU(D): Customers
        Returns the number of affected rows or -1 on error.
     */
    public int deleteCustomer(String customerID) throws Exception {
        String sql = "delete from Customers where CustomerID=?";
        return ds.execDML(sql, customerID);
    }

    /*
        (C)RUD: Employees
        Generated values are passed to DTO.
        Returns the number of affected rows or -1 on error.
     */
    public int createEmployee(Employee p) throws Exception {
        String sql = "insert into Employees (LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDate, Address, City, Region, PostalCode, Country, HomePhone, Extension, Photo, Notes, PhotoPath) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        String[] gen_col_nm = new String[]{"EmployeeID"};
        Object[] gen_values = new Object[gen_col_nm.length];
        int res = ds.insert(sql, gen_col_nm, gen_values, p.getLastName(), p.getFirstName(), p.getTitle(), p.getTitleOfCourtesy(), p.getBirthDate(), p.getHireDate(), p.getAddress(), p.getCity(), p.getRegion(), p.getPostalCode(), p.getCountry(), p.getHomePhone(), p.getExtension(), p.getPhoto(), p.getNotes(), p.getPhotoPath());
        p.setEmployeeID(ds.castGeneratedValue(Integer.class, gen_values[0]));
        return res;
    }

    /*
        C(R)UD: Employees
     */
    public List<Employee> readEmployeeList() throws Exception {
        String sql = "select * from Employees";
        final List<Employee> res = new ArrayList<Employee>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Employee obj = new Employee();
                obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t
                obj.setLastName(rd.getValue(String.class, "LastName"));  // t <- t
                obj.setFirstName(rd.getValue(String.class, "FirstName"));  // t <- t
                obj.setTitle(rd.getValue(String.class, "Title"));  // t <- t
                obj.setTitleOfCourtesy(rd.getValue(String.class, "TitleOfCourtesy"));  // t <- t
                obj.setBirthDate(rd.getValue(String.class, "BirthDate"));  // t <- t
                obj.setHireDate(rd.getValue(String.class, "HireDate"));  // t <- t
                obj.setAddress(rd.getValue(String.class, "Address"));  // t <- t
                obj.setCity(rd.getValue(String.class, "City"));  // t <- t
                obj.setRegion(rd.getValue(String.class, "Region"));  // t <- t
                obj.setPostalCode(rd.getValue(String.class, "PostalCode"));  // t <- t
                obj.setCountry(rd.getValue(String.class, "Country"));  // t <- t
                obj.setHomePhone(rd.getValue(String.class, "HomePhone"));  // t <- t
                obj.setExtension(rd.getValue(String.class, "Extension"));  // t <- t
                obj.setPhoto(rd.getValue(String.class, "Photo"));  // t <- t
                obj.setNotes(rd.getValue(String.class, "Notes"));  // t <- t
                obj.setPhotoPath(rd.getValue(String.class, "PhotoPath"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: Employees
     */
    public Employee readEmployee(Integer employeeID) throws Exception {
        String sql = "select * from Employees where EmployeeID=?";
        DataStore.RowData rd = ds.queryRow(sql, employeeID);
        Employee obj = new Employee();
        obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t
        obj.setLastName(rd.getValue(String.class, "LastName"));  // t <- t
        obj.setFirstName(rd.getValue(String.class, "FirstName"));  // t <- t
        obj.setTitle(rd.getValue(String.class, "Title"));  // t <- t
        obj.setTitleOfCourtesy(rd.getValue(String.class, "TitleOfCourtesy"));  // t <- t
        obj.setBirthDate(rd.getValue(String.class, "BirthDate"));  // t <- t
        obj.setHireDate(rd.getValue(String.class, "HireDate"));  // t <- t
        obj.setAddress(rd.getValue(String.class, "Address"));  // t <- t
        obj.setCity(rd.getValue(String.class, "City"));  // t <- t
        obj.setRegion(rd.getValue(String.class, "Region"));  // t <- t
        obj.setPostalCode(rd.getValue(String.class, "PostalCode"));  // t <- t
        obj.setCountry(rd.getValue(String.class, "Country"));  // t <- t
        obj.setHomePhone(rd.getValue(String.class, "HomePhone"));  // t <- t
        obj.setExtension(rd.getValue(String.class, "Extension"));  // t <- t
        obj.setPhoto(rd.getValue(String.class, "Photo"));  // t <- t
        obj.setNotes(rd.getValue(String.class, "Notes"));  // t <- t
        obj.setPhotoPath(rd.getValue(String.class, "PhotoPath"));  // t <- t
        return obj;
    }

    /*
        CR(U)D: Employees
        Returns the number of affected rows or -1 on error.
     */
    public int updateEmployee(Employee p) throws Exception {
        String sql = "update Employees set LastName=?, FirstName=?, Title=?, TitleOfCourtesy=?, BirthDate=?, HireDate=?, Address=?, City=?, Region=?, PostalCode=?, Country=?, HomePhone=?, Extension=?, Photo=?, Notes=?, PhotoPath=? where EmployeeID=?";
        return ds.execDML(sql, p.getLastName(), p.getFirstName(), p.getTitle(), p.getTitleOfCourtesy(), p.getBirthDate(), p.getHireDate(), p.getAddress(), p.getCity(), p.getRegion(), p.getPostalCode(), p.getCountry(), p.getHomePhone(), p.getExtension(), p.getPhoto(), p.getNotes(), p.getPhotoPath(), p.getEmployeeID());
    }

    /*
        CR(U)D: Employees
        Returns the number of affected rows or -1 on error.
     */
    public int updateEmployee(String lastName, String firstName, String title, String titleOfCourtesy, String birthDate, String hireDate, String address, String city, String region, String postalCode, String country, String homePhone, String extension, String photo, String notes, String photoPath, Integer employeeID) throws Exception {
        String sql = "update Employees set LastName=?, FirstName=?, Title=?, TitleOfCourtesy=?, BirthDate=?, HireDate=?, Address=?, City=?, Region=?, PostalCode=?, Country=?, HomePhone=?, Extension=?, Photo=?, Notes=?, PhotoPath=? where EmployeeID=?";
        return ds.execDML(sql, lastName, firstName, title, titleOfCourtesy, birthDate, hireDate, address, city, region, postalCode, country, homePhone, extension, photo, notes, photoPath, employeeID);
    }

    /*
        CRU(D): Employees
        Returns the number of affected rows or -1 on error.
     */
    public int deleteEmployee(Integer employeeID) throws Exception {
        String sql = "delete from Employees where EmployeeID=?";
        return ds.execDML(sql, employeeID);
    }

    /*
        (C)RUD: EmployeesTerritories
        Returns the number of affected rows or -1 on error.
     */
    public int createEmployeesTerritory(EmployeesTerritory p) throws Exception {
        String sql = "insert into EmployeesTerritories (EmployeeID, TerritoryID) values (?, ?)";
        return ds.execDML(sql, p.getEmployeeID(), p.getTerritoryID());
    }

    /*
        (C)RUD: EmployeesTerritories
        Returns the number of affected rows or -1 on error.
     */
    public int createEmployeesTerritory(Integer employeeID, Integer territoryID) throws Exception {
        String sql = "insert into EmployeesTerritories (EmployeeID, TerritoryID) values (?, ?)";
        return ds.execDML(sql, employeeID, territoryID);
    }

    /*
        C(R)UD: EmployeesTerritories
     */
    public List<EmployeesTerritory> readEmployeesTerritoryList() throws Exception {
        String sql = "select * from EmployeesTerritories";
        final List<EmployeesTerritory> res = new ArrayList<EmployeesTerritory>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                EmployeesTerritory obj = new EmployeesTerritory();
                obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t
                obj.setTerritoryID(rd.getValue(Integer.class, "TerritoryID"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: EmployeesTerritories
     */
    public EmployeesTerritory readEmployeesTerritory(Integer employeeID, Integer territoryID) throws Exception {
        String sql = "select * from EmployeesTerritories where EmployeeID=? and TerritoryID=?";
        DataStore.RowData rd = ds.queryRow(sql, employeeID, territoryID);
        EmployeesTerritory obj = new EmployeesTerritory();
        obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t
        obj.setTerritoryID(rd.getValue(Integer.class, "TerritoryID"));  // t <- t
        return obj;
    }

    // INFO: updateEmployeesTerritory is not rendered because all columns are part of PK.

    /*
        CRU(D): EmployeesTerritories
        Returns the number of affected rows or -1 on error.
     */
    public int deleteEmployeesTerritory(Integer employeeID, Integer territoryID) throws Exception {
        String sql = "delete from EmployeesTerritories where EmployeeID=? and TerritoryID=?";
        return ds.execDML(sql, employeeID, territoryID);
    }

    public List<EmployeesTerritory> getEmployeesTerritoriesByEmployee(Integer employee_id) throws Exception {
        String sql = "select * from EmployeesTerritories where EmployeeID=?";
        final List<EmployeesTerritory> res = new ArrayList<EmployeesTerritory>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                EmployeesTerritory obj = new EmployeesTerritory();
                obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t [INFO] SQL-shortcut
                obj.setTerritoryID(rd.getValue(Integer.class, "TerritoryID"));  // t <- t
                res.add(obj);
            }
        }, employee_id);
        return res;
    }

    public List<EmployeesTerritory> getEmployeesTerritoriesByTerritory(Integer territory_id) throws Exception {
        String sql = "select * from EmployeesTerritories where TerritoryID=?";
        final List<EmployeesTerritory> res = new ArrayList<EmployeesTerritory>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                EmployeesTerritory obj = new EmployeesTerritory();
                obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t [INFO] SQL-shortcut
                obj.setTerritoryID(rd.getValue(Integer.class, "TerritoryID"));  // t <- t
                res.add(obj);
            }
        }, territory_id);
        return res;
    }

    /*
        (C)RUD: InternationalOrders
        Returns the number of affected rows or -1 on error.
     */
    public int createInternationalOrder(InternationalOrder p) throws Exception {
        String sql = "insert into InternationalOrders (OrderID, CustomsDescription, ExciseTax) values (?, ?, ?)";
        return ds.execDML(sql, p.getOrderID(), p.getCustomsDescription(), p.getExciseTax());
    }

    /*
        (C)RUD: InternationalOrders
        Returns the number of affected rows or -1 on error.
     */
    public int createInternationalOrder(Integer orderID, String customsDescription, String exciseTax) throws Exception {
        String sql = "insert into InternationalOrders (OrderID, CustomsDescription, ExciseTax) values (?, ?, ?)";
        return ds.execDML(sql, orderID, customsDescription, exciseTax);
    }

    /*
        C(R)UD: InternationalOrders
     */
    public List<InternationalOrder> readInternationalOrderList() throws Exception {
        String sql = "select * from InternationalOrders";
        final List<InternationalOrder> res = new ArrayList<InternationalOrder>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                InternationalOrder obj = new InternationalOrder();
                obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t
                obj.setCustomsDescription(rd.getValue(String.class, "CustomsDescription"));  // t <- t
                obj.setExciseTax(rd.getValue(String.class, "ExciseTax"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: InternationalOrders
     */
    public InternationalOrder readInternationalOrder(Integer orderID) throws Exception {
        String sql = "select * from InternationalOrders where OrderID=?";
        DataStore.RowData rd = ds.queryRow(sql, orderID);
        InternationalOrder obj = new InternationalOrder();
        obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t
        obj.setCustomsDescription(rd.getValue(String.class, "CustomsDescription"));  // t <- t
        obj.setExciseTax(rd.getValue(String.class, "ExciseTax"));  // t <- t
        return obj;
    }

    /*
        CR(U)D: InternationalOrders
        Returns the number of affected rows or -1 on error.
     */
    public int updateInternationalOrder(InternationalOrder p) throws Exception {
        String sql = "update InternationalOrders set CustomsDescription=?, ExciseTax=? where OrderID=?";
        return ds.execDML(sql, p.getCustomsDescription(), p.getExciseTax(), p.getOrderID());
    }

    /*
        CR(U)D: InternationalOrders
        Returns the number of affected rows or -1 on error.
     */
    public int updateInternationalOrder(String customsDescription, String exciseTax, Integer orderID) throws Exception {
        String sql = "update InternationalOrders set CustomsDescription=?, ExciseTax=? where OrderID=?";
        return ds.execDML(sql, customsDescription, exciseTax, orderID);
    }

    /*
        CRU(D): InternationalOrders
        Returns the number of affected rows or -1 on error.
     */
    public int deleteInternationalOrder(Integer orderID) throws Exception {
        String sql = "delete from InternationalOrders where OrderID=?";
        return ds.execDML(sql, orderID);
    }

    public List<InternationalOrder> getInternationalOrdersByOrder(Integer order_id) throws Exception {
        String sql = "select * from InternationalOrders where OrderID=?";
        final List<InternationalOrder> res = new ArrayList<InternationalOrder>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                InternationalOrder obj = new InternationalOrder();
                obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t [INFO] SQL-shortcut
                obj.setCustomsDescription(rd.getValue(String.class, "CustomsDescription"));  // t <- t
                obj.setExciseTax(rd.getValue(String.class, "ExciseTax"));  // t <- t
                res.add(obj);
            }
        }, order_id);
        return res;
    }

    /*
        (C)RUD: OrderDetails
        Returns the number of affected rows or -1 on error.
     */
    public int createOrderDetail(OrderDetail p) throws Exception {
        String sql = "insert into OrderDetails (OrderID, ProductID, UnitPrice, Quantity, Discount) values (?, ?, ?, ?, ?)";
        return ds.execDML(sql, p.getOrderID(), p.getProductID(), p.getUnitPrice(), p.getQuantity(), p.getDiscount());
    }

    /*
        (C)RUD: OrderDetails
        Returns the number of affected rows or -1 on error.
     */
    public int createOrderDetail(Integer orderID, Integer productID, String unitPrice, Integer quantity, Float discount) throws Exception {
        String sql = "insert into OrderDetails (OrderID, ProductID, UnitPrice, Quantity, Discount) values (?, ?, ?, ?, ?)";
        return ds.execDML(sql, orderID, productID, unitPrice, quantity, discount);
    }

    /*
        C(R)UD: OrderDetails
     */
    public List<OrderDetail> readOrderDetailList() throws Exception {
        String sql = "select * from OrderDetails";
        final List<OrderDetail> res = new ArrayList<OrderDetail>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                OrderDetail obj = new OrderDetail();
                obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t
                obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t
                obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
                obj.setQuantity(rd.getValue(Integer.class, "Quantity"));  // t <- t
                obj.setDiscount(rd.getValue(Float.class, "Discount"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: OrderDetails
     */
    public OrderDetail readOrderDetail(Integer orderID, Integer productID) throws Exception {
        String sql = "select * from OrderDetails where OrderID=? and ProductID=?";
        DataStore.RowData rd = ds.queryRow(sql, orderID, productID);
        OrderDetail obj = new OrderDetail();
        obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t
        obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t
        obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
        obj.setQuantity(rd.getValue(Integer.class, "Quantity"));  // t <- t
        obj.setDiscount(rd.getValue(Float.class, "Discount"));  // t <- t
        return obj;
    }

    /*
        CR(U)D: OrderDetails
        Returns the number of affected rows or -1 on error.
     */
    public int updateOrderDetail(OrderDetail p) throws Exception {
        String sql = "update OrderDetails set UnitPrice=?, Quantity=?, Discount=? where OrderID=? and ProductID=?";
        return ds.execDML(sql, p.getUnitPrice(), p.getQuantity(), p.getDiscount(), p.getOrderID(), p.getProductID());
    }

    /*
        CR(U)D: OrderDetails
        Returns the number of affected rows or -1 on error.
     */
    public int updateOrderDetail(String unitPrice, Integer quantity, Float discount, Integer orderID, Integer productID) throws Exception {
        String sql = "update OrderDetails set UnitPrice=?, Quantity=?, Discount=? where OrderID=? and ProductID=?";
        return ds.execDML(sql, unitPrice, quantity, discount, orderID, productID);
    }

    /*
        CRU(D): OrderDetails
        Returns the number of affected rows or -1 on error.
     */
    public int deleteOrderDetail(Integer orderID, Integer productID) throws Exception {
        String sql = "delete from OrderDetails where OrderID=? and ProductID=?";
        return ds.execDML(sql, orderID, productID);
    }

    public List<OrderDetail> getOrderDetailsByOrder(Integer order_id) throws Exception {
        String sql = "select * from OrderDetails where OrderID=?";
        final List<OrderDetail> res = new ArrayList<OrderDetail>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                OrderDetail obj = new OrderDetail();
                obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t [INFO] SQL-shortcut
                obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t
                obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
                obj.setQuantity(rd.getValue(Integer.class, "Quantity"));  // t <- t
                obj.setDiscount(rd.getValue(Float.class, "Discount"));  // t <- t
                res.add(obj);
            }
        }, order_id);
        return res;
    }

    public List<OrderDetail> getOrderDetailsByProduct(Integer product_id) throws Exception {
        String sql = "select * from OrderDetails where ProductID=?";
        final List<OrderDetail> res = new ArrayList<OrderDetail>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                OrderDetail obj = new OrderDetail();
                obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t [INFO] SQL-shortcut
                obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t
                obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
                obj.setQuantity(rd.getValue(Integer.class, "Quantity"));  // t <- t
                obj.setDiscount(rd.getValue(Float.class, "Discount"));  // t <- t
                res.add(obj);
            }
        }, product_id);
        return res;
    }

    /*
        (C)RUD: Orders
        Generated values are passed to DTO.
        Returns the number of affected rows or -1 on error.
     */
    public int createOrder(Order p) throws Exception {
        String sql = "insert into Orders (CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, ShipCountry) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        String[] gen_col_nm = new String[]{"OrderID"};
        Object[] gen_values = new Object[gen_col_nm.length];
        int res = ds.insert(sql, gen_col_nm, gen_values, p.getCustomerID(), p.getEmployeeID(), p.getOrderDate(), p.getRequiredDate(), p.getShippedDate(), p.getFreight(), p.getShipName(), p.getShipAddress(), p.getShipCity(), p.getShipRegion(), p.getShipPostalCode(), p.getShipCountry());
        p.setOrderID(ds.castGeneratedValue(Integer.class, gen_values[0]));
        return res;
    }

    /*
        C(R)UD: Orders
     */
    public List<Order> readOrderList() throws Exception {
        String sql = "select * from Orders";
        final List<Order> res = new ArrayList<Order>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Order obj = new Order();
                obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t
                obj.setCustomerID(rd.getValue(String.class, "CustomerID"));  // t <- t
                obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t
                obj.setOrderDate(rd.getValue(String.class, "OrderDate"));  // t <- t
                obj.setRequiredDate(rd.getValue(String.class, "RequiredDate"));  // t <- t
                obj.setShippedDate(rd.getValue(String.class, "ShippedDate"));  // t <- t
                obj.setFreight(rd.getValue(String.class, "Freight"));  // t <- t
                obj.setShipName(rd.getValue(String.class, "ShipName"));  // t <- t
                obj.setShipAddress(rd.getValue(String.class, "ShipAddress"));  // t <- t
                obj.setShipCity(rd.getValue(String.class, "ShipCity"));  // t <- t
                obj.setShipRegion(rd.getValue(String.class, "ShipRegion"));  // t <- t
                obj.setShipPostalCode(rd.getValue(String.class, "ShipPostalCode"));  // t <- t
                obj.setShipCountry(rd.getValue(String.class, "ShipCountry"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: Orders
     */
    public Order readOrder(Integer orderID) throws Exception {
        String sql = "select * from Orders where OrderID=?";
        DataStore.RowData rd = ds.queryRow(sql, orderID);
        Order obj = new Order();
        obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t
        obj.setCustomerID(rd.getValue(String.class, "CustomerID"));  // t <- t
        obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t
        obj.setOrderDate(rd.getValue(String.class, "OrderDate"));  // t <- t
        obj.setRequiredDate(rd.getValue(String.class, "RequiredDate"));  // t <- t
        obj.setShippedDate(rd.getValue(String.class, "ShippedDate"));  // t <- t
        obj.setFreight(rd.getValue(String.class, "Freight"));  // t <- t
        obj.setShipName(rd.getValue(String.class, "ShipName"));  // t <- t
        obj.setShipAddress(rd.getValue(String.class, "ShipAddress"));  // t <- t
        obj.setShipCity(rd.getValue(String.class, "ShipCity"));  // t <- t
        obj.setShipRegion(rd.getValue(String.class, "ShipRegion"));  // t <- t
        obj.setShipPostalCode(rd.getValue(String.class, "ShipPostalCode"));  // t <- t
        obj.setShipCountry(rd.getValue(String.class, "ShipCountry"));  // t <- t
        return obj;
    }

    /*
        CR(U)D: Orders
        Returns the number of affected rows or -1 on error.
     */
    public int updateOrder(Order p) throws Exception {
        String sql = "update Orders set CustomerID=?, EmployeeID=?, OrderDate=?, RequiredDate=?, ShippedDate=?, Freight=?, ShipName=?, ShipAddress=?, ShipCity=?, ShipRegion=?, ShipPostalCode=?, ShipCountry=? where OrderID=?";
        return ds.execDML(sql, p.getCustomerID(), p.getEmployeeID(), p.getOrderDate(), p.getRequiredDate(), p.getShippedDate(), p.getFreight(), p.getShipName(), p.getShipAddress(), p.getShipCity(), p.getShipRegion(), p.getShipPostalCode(), p.getShipCountry(), p.getOrderID());
    }

    /*
        CR(U)D: Orders
        Returns the number of affected rows or -1 on error.
     */
    public int updateOrder(String customerID, Integer employeeID, String orderDate, String requiredDate, String shippedDate, String freight, String shipName, String shipAddress, String shipCity, String shipRegion, String shipPostalCode, String shipCountry, Integer orderID) throws Exception {
        String sql = "update Orders set CustomerID=?, EmployeeID=?, OrderDate=?, RequiredDate=?, ShippedDate=?, Freight=?, ShipName=?, ShipAddress=?, ShipCity=?, ShipRegion=?, ShipPostalCode=?, ShipCountry=? where OrderID=?";
        return ds.execDML(sql, customerID, employeeID, orderDate, requiredDate, shippedDate, freight, shipName, shipAddress, shipCity, shipRegion, shipPostalCode, shipCountry, orderID);
    }

    /*
        CRU(D): Orders
        Returns the number of affected rows or -1 on error.
     */
    public int deleteOrder(Integer orderID) throws Exception {
        String sql = "delete from Orders where OrderID=?";
        return ds.execDML(sql, orderID);
    }

    public List<Order> getOrdersByCustomer(String customer_id) throws Exception {
        String sql = "select * from Orders where CustomerID=?";
        final List<Order> res = new ArrayList<Order>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Order obj = new Order();
                obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t [INFO] SQL-shortcut
                obj.setCustomerID(rd.getValue(String.class, "CustomerID"));  // t <- t
                obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t
                obj.setOrderDate(rd.getValue(String.class, "OrderDate"));  // t <- t
                obj.setRequiredDate(rd.getValue(String.class, "RequiredDate"));  // t <- t
                obj.setShippedDate(rd.getValue(String.class, "ShippedDate"));  // t <- t
                obj.setFreight(rd.getValue(String.class, "Freight"));  // t <- t
                obj.setShipName(rd.getValue(String.class, "ShipName"));  // t <- t
                obj.setShipAddress(rd.getValue(String.class, "ShipAddress"));  // t <- t
                obj.setShipCity(rd.getValue(String.class, "ShipCity"));  // t <- t
                obj.setShipRegion(rd.getValue(String.class, "ShipRegion"));  // t <- t
                obj.setShipPostalCode(rd.getValue(String.class, "ShipPostalCode"));  // t <- t
                obj.setShipCountry(rd.getValue(String.class, "ShipCountry"));  // t <- t
                res.add(obj);
            }
        }, customer_id);
        return res;
    }

    /*
        (C)RUD: PreviousEmployees
        Returns the number of affected rows or -1 on error.
     */
    public int createPreviousEmployee(PreviousEmployee p) throws Exception {
        String sql = "insert into PreviousEmployees (EmployeeID, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDate, Address, City, Region, PostalCode, Country, HomePhone, Extension, Photo, Notes, PhotoPath) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        return ds.execDML(sql, p.getEmployeeID(), p.getLastName(), p.getFirstName(), p.getTitle(), p.getTitleOfCourtesy(), p.getBirthDate(), p.getHireDate(), p.getAddress(), p.getCity(), p.getRegion(), p.getPostalCode(), p.getCountry(), p.getHomePhone(), p.getExtension(), p.getPhoto(), p.getNotes(), p.getPhotoPath());
    }

    /*
        (C)RUD: PreviousEmployees
        Returns the number of affected rows or -1 on error.
     */
    public int createPreviousEmployee(Integer employeeID, String lastName, String firstName, String title, String titleOfCourtesy, String birthDate, String hireDate, String address, String city, String region, String postalCode, String country, String homePhone, String extension, String photo, String notes, String photoPath) throws Exception {
        String sql = "insert into PreviousEmployees (EmployeeID, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDate, Address, City, Region, PostalCode, Country, HomePhone, Extension, Photo, Notes, PhotoPath) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        return ds.execDML(sql, employeeID, lastName, firstName, title, titleOfCourtesy, birthDate, hireDate, address, city, region, postalCode, country, homePhone, extension, photo, notes, photoPath);
    }

    /*
        C(R)UD: PreviousEmployees
     */
    public List<PreviousEmployee> readPreviousEmployeeList() throws Exception {
        String sql = "select * from PreviousEmployees";
        final List<PreviousEmployee> res = new ArrayList<PreviousEmployee>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                PreviousEmployee obj = new PreviousEmployee();
                obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t
                obj.setLastName(rd.getValue(String.class, "LastName"));  // t <- t
                obj.setFirstName(rd.getValue(String.class, "FirstName"));  // t <- t
                obj.setTitle(rd.getValue(String.class, "Title"));  // t <- t
                obj.setTitleOfCourtesy(rd.getValue(String.class, "TitleOfCourtesy"));  // t <- t
                obj.setBirthDate(rd.getValue(String.class, "BirthDate"));  // t <- t
                obj.setHireDate(rd.getValue(String.class, "HireDate"));  // t <- t
                obj.setAddress(rd.getValue(String.class, "Address"));  // t <- t
                obj.setCity(rd.getValue(String.class, "City"));  // t <- t
                obj.setRegion(rd.getValue(String.class, "Region"));  // t <- t
                obj.setPostalCode(rd.getValue(String.class, "PostalCode"));  // t <- t
                obj.setCountry(rd.getValue(String.class, "Country"));  // t <- t
                obj.setHomePhone(rd.getValue(String.class, "HomePhone"));  // t <- t
                obj.setExtension(rd.getValue(String.class, "Extension"));  // t <- t
                obj.setPhoto(rd.getValue(String.class, "Photo"));  // t <- t
                obj.setNotes(rd.getValue(String.class, "Notes"));  // t <- t
                obj.setPhotoPath(rd.getValue(String.class, "PhotoPath"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: PreviousEmployees
     */
    public PreviousEmployee readPreviousEmployee(Integer employeeID) throws Exception {
        String sql = "select * from PreviousEmployees where EmployeeID=?";
        DataStore.RowData rd = ds.queryRow(sql, employeeID);
        PreviousEmployee obj = new PreviousEmployee();
        obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t
        obj.setLastName(rd.getValue(String.class, "LastName"));  // t <- t
        obj.setFirstName(rd.getValue(String.class, "FirstName"));  // t <- t
        obj.setTitle(rd.getValue(String.class, "Title"));  // t <- t
        obj.setTitleOfCourtesy(rd.getValue(String.class, "TitleOfCourtesy"));  // t <- t
        obj.setBirthDate(rd.getValue(String.class, "BirthDate"));  // t <- t
        obj.setHireDate(rd.getValue(String.class, "HireDate"));  // t <- t
        obj.setAddress(rd.getValue(String.class, "Address"));  // t <- t
        obj.setCity(rd.getValue(String.class, "City"));  // t <- t
        obj.setRegion(rd.getValue(String.class, "Region"));  // t <- t
        obj.setPostalCode(rd.getValue(String.class, "PostalCode"));  // t <- t
        obj.setCountry(rd.getValue(String.class, "Country"));  // t <- t
        obj.setHomePhone(rd.getValue(String.class, "HomePhone"));  // t <- t
        obj.setExtension(rd.getValue(String.class, "Extension"));  // t <- t
        obj.setPhoto(rd.getValue(String.class, "Photo"));  // t <- t
        obj.setNotes(rd.getValue(String.class, "Notes"));  // t <- t
        obj.setPhotoPath(rd.getValue(String.class, "PhotoPath"));  // t <- t
        return obj;
    }

    /*
        CR(U)D: PreviousEmployees
        Returns the number of affected rows or -1 on error.
     */
    public int updatePreviousEmployee(PreviousEmployee p) throws Exception {
        String sql = "update PreviousEmployees set LastName=?, FirstName=?, Title=?, TitleOfCourtesy=?, BirthDate=?, HireDate=?, Address=?, City=?, Region=?, PostalCode=?, Country=?, HomePhone=?, Extension=?, Photo=?, Notes=?, PhotoPath=? where EmployeeID=?";
        return ds.execDML(sql, p.getLastName(), p.getFirstName(), p.getTitle(), p.getTitleOfCourtesy(), p.getBirthDate(), p.getHireDate(), p.getAddress(), p.getCity(), p.getRegion(), p.getPostalCode(), p.getCountry(), p.getHomePhone(), p.getExtension(), p.getPhoto(), p.getNotes(), p.getPhotoPath(), p.getEmployeeID());
    }

    /*
        CR(U)D: PreviousEmployees
        Returns the number of affected rows or -1 on error.
     */
    public int updatePreviousEmployee(String lastName, String firstName, String title, String titleOfCourtesy, String birthDate, String hireDate, String address, String city, String region, String postalCode, String country, String homePhone, String extension, String photo, String notes, String photoPath, Integer employeeID) throws Exception {
        String sql = "update PreviousEmployees set LastName=?, FirstName=?, Title=?, TitleOfCourtesy=?, BirthDate=?, HireDate=?, Address=?, City=?, Region=?, PostalCode=?, Country=?, HomePhone=?, Extension=?, Photo=?, Notes=?, PhotoPath=? where EmployeeID=?";
        return ds.execDML(sql, lastName, firstName, title, titleOfCourtesy, birthDate, hireDate, address, city, region, postalCode, country, homePhone, extension, photo, notes, photoPath, employeeID);
    }

    /*
        CRU(D): PreviousEmployees
        Returns the number of affected rows or -1 on error.
     */
    public int deletePreviousEmployee(Integer employeeID) throws Exception {
        String sql = "delete from PreviousEmployees where EmployeeID=?";
        return ds.execDML(sql, employeeID);
    }

    /*
        (C)RUD: Products
        Generated values are passed to DTO.
        Returns the number of affected rows or -1 on error.
     */
    public int createProduct(Product p) throws Exception {
        String sql = "insert into Products (ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued, DiscontinuedDate) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        String[] gen_col_nm = new String[]{"ProductID"};
        Object[] gen_values = new Object[gen_col_nm.length];
        int res = ds.insert(sql, gen_col_nm, gen_values, p.getProductName(), p.getSupplierID(), p.getCategoryID(), p.getQuantityPerUnit(), p.getUnitPrice(), p.getUnitsInStock(), p.getUnitsOnOrder(), p.getReorderLevel(), p.getDiscontinued(), p.getDiscontinuedDate());
        p.setProductID(ds.castGeneratedValue(Integer.class, gen_values[0]));
        return res;
    }

    /*
        C(R)UD: Products
     */
    public List<Product> readProductList() throws Exception {
        String sql = "select * from Products";
        final List<Product> res = new ArrayList<Product>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Product obj = new Product();
                obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t
                obj.setProductName(rd.getValue(String.class, "ProductName"));  // t <- t
                obj.setSupplierID(rd.getValue(Integer.class, "SupplierID"));  // t <- t
                obj.setCategoryID(rd.getValue(Integer.class, "CategoryID"));  // t <- t
                obj.setQuantityPerUnit(rd.getValue(String.class, "QuantityPerUnit"));  // t <- t
                obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
                obj.setUnitsInStock(rd.getValue(Integer.class, "UnitsInStock"));  // t <- t
                obj.setUnitsOnOrder(rd.getValue(Integer.class, "UnitsOnOrder"));  // t <- t
                obj.setReorderLevel(rd.getValue(Integer.class, "ReorderLevel"));  // t <- t
                obj.setDiscontinued(rd.getValue(String.class, "Discontinued"));  // t <- t
                obj.setDiscontinuedDate(rd.getValue(String.class, "DiscontinuedDate"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: Products
     */
    public Product readProduct(Integer productID) throws Exception {
        String sql = "select * from Products where ProductID=?";
        DataStore.RowData rd = ds.queryRow(sql, productID);
        Product obj = new Product();
        obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t
        obj.setProductName(rd.getValue(String.class, "ProductName"));  // t <- t
        obj.setSupplierID(rd.getValue(Integer.class, "SupplierID"));  // t <- t
        obj.setCategoryID(rd.getValue(Integer.class, "CategoryID"));  // t <- t
        obj.setQuantityPerUnit(rd.getValue(String.class, "QuantityPerUnit"));  // t <- t
        obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
        obj.setUnitsInStock(rd.getValue(Integer.class, "UnitsInStock"));  // t <- t
        obj.setUnitsOnOrder(rd.getValue(Integer.class, "UnitsOnOrder"));  // t <- t
        obj.setReorderLevel(rd.getValue(Integer.class, "ReorderLevel"));  // t <- t
        obj.setDiscontinued(rd.getValue(String.class, "Discontinued"));  // t <- t
        obj.setDiscontinuedDate(rd.getValue(String.class, "DiscontinuedDate"));  // t <- t
        return obj;
    }

    /*
        CR(U)D: Products
        Returns the number of affected rows or -1 on error.
     */
    public int updateProduct(Product p) throws Exception {
        String sql = "update Products set ProductName=?, SupplierID=?, CategoryID=?, QuantityPerUnit=?, UnitPrice=?, UnitsInStock=?, UnitsOnOrder=?, ReorderLevel=?, Discontinued=?, DiscontinuedDate=? where ProductID=?";
        return ds.execDML(sql, p.getProductName(), p.getSupplierID(), p.getCategoryID(), p.getQuantityPerUnit(), p.getUnitPrice(), p.getUnitsInStock(), p.getUnitsOnOrder(), p.getReorderLevel(), p.getDiscontinued(), p.getDiscontinuedDate(), p.getProductID());
    }

    /*
        CR(U)D: Products
        Returns the number of affected rows or -1 on error.
     */
    public int updateProduct(String productName, Integer supplierID, Integer categoryID, String quantityPerUnit, String unitPrice, Integer unitsInStock, Integer unitsOnOrder, Integer reorderLevel, String discontinued, String discontinuedDate, Integer productID) throws Exception {
        String sql = "update Products set ProductName=?, SupplierID=?, CategoryID=?, QuantityPerUnit=?, UnitPrice=?, UnitsInStock=?, UnitsOnOrder=?, ReorderLevel=?, Discontinued=?, DiscontinuedDate=? where ProductID=?";
        return ds.execDML(sql, productName, supplierID, categoryID, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued, discontinuedDate, productID);
    }

    /*
        CRU(D): Products
        Returns the number of affected rows or -1 on error.
     */
    public int deleteProduct(Integer productID) throws Exception {
        String sql = "delete from Products where ProductID=?";
        return ds.execDML(sql, productID);
    }

    public List<Product> getProductsBySupplier(Integer supplier_id) throws Exception {
        String sql = "select * from Products where SupplierID=?";
        final List<Product> res = new ArrayList<Product>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Product obj = new Product();
                obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t [INFO] SQL-shortcut
                obj.setProductName(rd.getValue(String.class, "ProductName"));  // t <- t
                obj.setSupplierID(rd.getValue(Integer.class, "SupplierID"));  // t <- t
                obj.setCategoryID(rd.getValue(Integer.class, "CategoryID"));  // t <- t
                obj.setQuantityPerUnit(rd.getValue(String.class, "QuantityPerUnit"));  // t <- t
                obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
                obj.setUnitsInStock(rd.getValue(Integer.class, "UnitsInStock"));  // t <- t
                obj.setUnitsOnOrder(rd.getValue(Integer.class, "UnitsOnOrder"));  // t <- t
                obj.setReorderLevel(rd.getValue(Integer.class, "ReorderLevel"));  // t <- t
                obj.setDiscontinued(rd.getValue(String.class, "Discontinued"));  // t <- t
                obj.setDiscontinuedDate(rd.getValue(String.class, "DiscontinuedDate"));  // t <- t
                res.add(obj);
            }
        }, supplier_id);
        return res;
    }

    public List<Product> getProductsByCategory(Integer category_id) throws Exception {
        String sql = "select * from Products where CategoryID=?";
        final List<Product> res = new ArrayList<Product>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Product obj = new Product();
                obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t [INFO] SQL-shortcut
                obj.setProductName(rd.getValue(String.class, "ProductName"));  // t <- t
                obj.setSupplierID(rd.getValue(Integer.class, "SupplierID"));  // t <- t
                obj.setCategoryID(rd.getValue(Integer.class, "CategoryID"));  // t <- t
                obj.setQuantityPerUnit(rd.getValue(String.class, "QuantityPerUnit"));  // t <- t
                obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
                obj.setUnitsInStock(rd.getValue(Integer.class, "UnitsInStock"));  // t <- t
                obj.setUnitsOnOrder(rd.getValue(Integer.class, "UnitsOnOrder"));  // t <- t
                obj.setReorderLevel(rd.getValue(Integer.class, "ReorderLevel"));  // t <- t
                obj.setDiscontinued(rd.getValue(String.class, "Discontinued"));  // t <- t
                obj.setDiscontinuedDate(rd.getValue(String.class, "DiscontinuedDate"));  // t <- t
                res.add(obj);
            }
        }, category_id);
        return res;
    }

    /*
        (C)RUD: Regions
        Returns the number of affected rows or -1 on error.
     */
    public int createRegion(Region p) throws Exception {
        String sql = "insert into Regions (RegionID, RegionDescription) values (?, ?)";
        return ds.execDML(sql, p.getRegionID(), p.getRegionDescription());
    }

    /*
        (C)RUD: Regions
        Returns the number of affected rows or -1 on error.
     */
    public int createRegion(Integer regionID, String regionDescription) throws Exception {
        String sql = "insert into Regions (RegionID, RegionDescription) values (?, ?)";
        return ds.execDML(sql, regionID, regionDescription);
    }

    /*
        C(R)UD: Regions
     */
    public List<Region> readRegionList() throws Exception {
        String sql = "select * from Regions";
        final List<Region> res = new ArrayList<Region>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Region obj = new Region();
                obj.setRegionID(rd.getValue(Integer.class, "RegionID"));  // t <- t
                obj.setRegionDescription(rd.getValue(String.class, "RegionDescription"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: Regions
     */
    public Region readRegion(Integer regionID) throws Exception {
        String sql = "select * from Regions where RegionID=?";
        DataStore.RowData rd = ds.queryRow(sql, regionID);
        Region obj = new Region();
        obj.setRegionID(rd.getValue(Integer.class, "RegionID"));  // t <- t
        obj.setRegionDescription(rd.getValue(String.class, "RegionDescription"));  // t <- t
        return obj;
    }

    /*
        CR(U)D: Regions
        Returns the number of affected rows or -1 on error.
     */
    public int updateRegion(Region p) throws Exception {
        String sql = "update Regions set RegionDescription=? where RegionID=?";
        return ds.execDML(sql, p.getRegionDescription(), p.getRegionID());
    }

    /*
        CR(U)D: Regions
        Returns the number of affected rows or -1 on error.
     */
    public int updateRegion(String regionDescription, Integer regionID) throws Exception {
        String sql = "update Regions set RegionDescription=? where RegionID=?";
        return ds.execDML(sql, regionDescription, regionID);
    }

    /*
        CRU(D): Regions
        Returns the number of affected rows or -1 on error.
     */
    public int deleteRegion(Integer regionID) throws Exception {
        String sql = "delete from Regions where RegionID=?";
        return ds.execDML(sql, regionID);
    }

    /*
        (C)RUD: Suppliers
        Generated values are passed to DTO.
        Returns the number of affected rows or -1 on error.
     */
    public int createSupplier(Supplier p) throws Exception {
        String sql = "insert into Suppliers (CompanyName, ContactName, ContactTitle, Address, City, Region, PostalCode, Country, Phone, Fax, HomePage) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        String[] gen_col_nm = new String[]{"SupplierID"};
        Object[] gen_values = new Object[gen_col_nm.length];
        int res = ds.insert(sql, gen_col_nm, gen_values, p.getCompanyName(), p.getContactName(), p.getContactTitle(), p.getAddress(), p.getCity(), p.getRegion(), p.getPostalCode(), p.getCountry(), p.getPhone(), p.getFax(), p.getHomePage());
        p.setSupplierID(ds.castGeneratedValue(Integer.class, gen_values[0]));
        return res;
    }

    /*
        C(R)UD: Suppliers
     */
    public List<Supplier> readSupplierList() throws Exception {
        String sql = "select * from Suppliers";
        final List<Supplier> res = new ArrayList<Supplier>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Supplier obj = new Supplier();
                obj.setSupplierID(rd.getValue(Integer.class, "SupplierID"));  // t <- t
                obj.setCompanyName(rd.getValue(String.class, "CompanyName"));  // t <- t
                obj.setContactName(rd.getValue(String.class, "ContactName"));  // t <- t
                obj.setContactTitle(rd.getValue(String.class, "ContactTitle"));  // t <- t
                obj.setAddress(rd.getValue(String.class, "Address"));  // t <- t
                obj.setCity(rd.getValue(String.class, "City"));  // t <- t
                obj.setRegion(rd.getValue(String.class, "Region"));  // t <- t
                obj.setPostalCode(rd.getValue(String.class, "PostalCode"));  // t <- t
                obj.setCountry(rd.getValue(String.class, "Country"));  // t <- t
                obj.setPhone(rd.getValue(String.class, "Phone"));  // t <- t
                obj.setFax(rd.getValue(String.class, "Fax"));  // t <- t
                obj.setHomePage(rd.getValue(String.class, "HomePage"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: Suppliers
     */
    public Supplier readSupplier(Integer supplierID) throws Exception {
        String sql = "select * from Suppliers where SupplierID=?";
        DataStore.RowData rd = ds.queryRow(sql, supplierID);
        Supplier obj = new Supplier();
        obj.setSupplierID(rd.getValue(Integer.class, "SupplierID"));  // t <- t
        obj.setCompanyName(rd.getValue(String.class, "CompanyName"));  // t <- t
        obj.setContactName(rd.getValue(String.class, "ContactName"));  // t <- t
        obj.setContactTitle(rd.getValue(String.class, "ContactTitle"));  // t <- t
        obj.setAddress(rd.getValue(String.class, "Address"));  // t <- t
        obj.setCity(rd.getValue(String.class, "City"));  // t <- t
        obj.setRegion(rd.getValue(String.class, "Region"));  // t <- t
        obj.setPostalCode(rd.getValue(String.class, "PostalCode"));  // t <- t
        obj.setCountry(rd.getValue(String.class, "Country"));  // t <- t
        obj.setPhone(rd.getValue(String.class, "Phone"));  // t <- t
        obj.setFax(rd.getValue(String.class, "Fax"));  // t <- t
        obj.setHomePage(rd.getValue(String.class, "HomePage"));  // t <- t
        return obj;
    }

    /*
        CR(U)D: Suppliers
        Returns the number of affected rows or -1 on error.
     */
    public int updateSupplier(Supplier p) throws Exception {
        String sql = "update Suppliers set CompanyName=?, ContactName=?, ContactTitle=?, Address=?, City=?, Region=?, PostalCode=?, Country=?, Phone=?, Fax=?, HomePage=? where SupplierID=?";
        return ds.execDML(sql, p.getCompanyName(), p.getContactName(), p.getContactTitle(), p.getAddress(), p.getCity(), p.getRegion(), p.getPostalCode(), p.getCountry(), p.getPhone(), p.getFax(), p.getHomePage(), p.getSupplierID());
    }

    /*
        CR(U)D: Suppliers
        Returns the number of affected rows or -1 on error.
     */
    public int updateSupplier(String companyName, String contactName, String contactTitle, String address, String city, String region, String postalCode, String country, String phone, String fax, String homePage, Integer supplierID) throws Exception {
        String sql = "update Suppliers set CompanyName=?, ContactName=?, ContactTitle=?, Address=?, City=?, Region=?, PostalCode=?, Country=?, Phone=?, Fax=?, HomePage=? where SupplierID=?";
        return ds.execDML(sql, companyName, contactName, contactTitle, address, city, region, postalCode, country, phone, fax, homePage, supplierID);
    }

    /*
        CRU(D): Suppliers
        Returns the number of affected rows or -1 on error.
     */
    public int deleteSupplier(Integer supplierID) throws Exception {
        String sql = "delete from Suppliers where SupplierID=?";
        return ds.execDML(sql, supplierID);
    }

    /*
        (C)RUD: Territories
        Returns the number of affected rows or -1 on error.
     */
    public int createTerritory(Territory p) throws Exception {
        String sql = "insert into Territories (TerritoryID, TerritoryDescription, RegionID) values (?, ?, ?)";
        return ds.execDML(sql, p.getTerritoryID(), p.getTerritoryDescription(), p.getRegionID());
    }

    /*
        (C)RUD: Territories
        Returns the number of affected rows or -1 on error.
     */
    public int createTerritory(Integer territoryID, String territoryDescription, Integer regionID) throws Exception {
        String sql = "insert into Territories (TerritoryID, TerritoryDescription, RegionID) values (?, ?, ?)";
        return ds.execDML(sql, territoryID, territoryDescription, regionID);
    }

    /*
        C(R)UD: Territories
     */
    public List<Territory> readTerritoryList() throws Exception {
        String sql = "select * from Territories";
        final List<Territory> res = new ArrayList<Territory>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Territory obj = new Territory();
                obj.setTerritoryID(rd.getValue(Integer.class, "TerritoryID"));  // t <- t
                obj.setTerritoryDescription(rd.getValue(String.class, "TerritoryDescription"));  // t <- t
                obj.setRegionID(rd.getValue(Integer.class, "RegionID"));  // t <- t
                res.add(obj);
            }
        });
        return res;
    }

    /*
        C(R)UD: Territories
     */
    public Territory readTerritory(Integer territoryID) throws Exception {
        String sql = "select * from Territories where TerritoryID=?";
        DataStore.RowData rd = ds.queryRow(sql, territoryID);
        Territory obj = new Territory();
        obj.setTerritoryID(rd.getValue(Integer.class, "TerritoryID"));  // t <- t
        obj.setTerritoryDescription(rd.getValue(String.class, "TerritoryDescription"));  // t <- t
        obj.setRegionID(rd.getValue(Integer.class, "RegionID"));  // t <- t
        return obj;
    }

    /*
        CR(U)D: Territories
        Returns the number of affected rows or -1 on error.
     */
    public int updateTerritory(Territory p) throws Exception {
        String sql = "update Territories set TerritoryDescription=?, RegionID=? where TerritoryID=?";
        return ds.execDML(sql, p.getTerritoryDescription(), p.getRegionID(), p.getTerritoryID());
    }

    /*
        CR(U)D: Territories
        Returns the number of affected rows or -1 on error.
     */
    public int updateTerritory(String territoryDescription, Integer regionID, Integer territoryID) throws Exception {
        String sql = "update Territories set TerritoryDescription=?, RegionID=? where TerritoryID=?";
        return ds.execDML(sql, territoryDescription, regionID, territoryID);
    }

    /*
        CRU(D): Territories
        Returns the number of affected rows or -1 on error.
     */
    public int deleteTerritory(Integer territoryID) throws Exception {
        String sql = "delete from Territories where TerritoryID=?";
        return ds.execDML(sql, territoryID);
    }

    public List<Territory> getTerritoriesByRegion(Integer region_id) throws Exception {
        String sql = "select * from Territories where RegionID=?";
        final List<Territory> res = new ArrayList<Territory>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Territory obj = new Territory();
                obj.setTerritoryID(rd.getValue(Integer.class, "TerritoryID"));  // t <- t [INFO] SQL-shortcut
                obj.setTerritoryDescription(rd.getValue(String.class, "TerritoryDescription"));  // t <- t
                obj.setRegionID(rd.getValue(Integer.class, "RegionID"));  // t <- t
                res.add(obj);
            }
        }, region_id);
        return res;
    }
}