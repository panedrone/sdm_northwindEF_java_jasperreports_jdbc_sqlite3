package com.sqlite.northwindef.dao;

import com.sqldalmaker.DataStore;

import com.sqlite.northwindef.dto.EmployeesTerritory;
import com.sqlite.northwindef.dto.InternationalOrder;
import com.sqlite.northwindef.dto.Order;
import com.sqlite.northwindef.dto.OrderDetail;
import com.sqlite.northwindef.dto.Product;
import com.sqlite.northwindef.dto.Territory;
import java.util.ArrayList;
import java.util.List;

// This code was generated by a tool. Don't modify it manually.
// http://sqldalmaker.sourceforge.net

public class FK_Dao {

    protected final DataStore ds;

    public FK_Dao(DataStore ds) {
        this.ds = ds;
    }

    public List<EmployeesTerritory> getEmployeesTerritoriesByEmployee(Integer employee_id) throws Exception {
        String sql = "select * from EmployeesTerritories where EmployeeID=?";
        final List<EmployeesTerritory> res = new ArrayList<EmployeesTerritory>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                EmployeesTerritory obj = new EmployeesTerritory();
                obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t [INFO] SQL-shortcut
                obj.setTerritoryID(rd.getValue(Integer.class, "TerritoryID"));  // t <- t
                res.add(obj);
            }
        }, employee_id);
        return res;
    }

    public List<EmployeesTerritory> getEmployeesTerritoriesByTerritory(Integer territory_id) throws Exception {
        String sql = "select * from EmployeesTerritories where TerritoryID=?";
        final List<EmployeesTerritory> res = new ArrayList<EmployeesTerritory>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                EmployeesTerritory obj = new EmployeesTerritory();
                obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t [INFO] SQL-shortcut
                obj.setTerritoryID(rd.getValue(Integer.class, "TerritoryID"));  // t <- t
                res.add(obj);
            }
        }, territory_id);
        return res;
    }

    public List<InternationalOrder> getInternationalOrdersByOrder(Integer order_id) throws Exception {
        String sql = "select * from InternationalOrders where OrderID=?";
        final List<InternationalOrder> res = new ArrayList<InternationalOrder>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                InternationalOrder obj = new InternationalOrder();
                obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t [INFO] SQL-shortcut
                obj.setCustomsDescription(rd.getValue(String.class, "CustomsDescription"));  // t <- t
                obj.setExciseTax(rd.getValue(String.class, "ExciseTax"));  // t <- t
                res.add(obj);
            }
        }, order_id);
        return res;
    }

    public List<OrderDetail> getOrderDetailsByOrder(Integer order_id) throws Exception {
        String sql = "select * from OrderDetails where OrderID=?";
        final List<OrderDetail> res = new ArrayList<OrderDetail>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                OrderDetail obj = new OrderDetail();
                obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t [INFO] SQL-shortcut
                obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t
                obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
                obj.setQuantity(rd.getValue(Integer.class, "Quantity"));  // t <- t
                obj.setDiscount(rd.getValue(Float.class, "Discount"));  // t <- t
                res.add(obj);
            }
        }, order_id);
        return res;
    }

    public List<OrderDetail> getOrderDetailsByProduct(Integer product_id) throws Exception {
        String sql = "select * from OrderDetails where ProductID=?";
        final List<OrderDetail> res = new ArrayList<OrderDetail>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                OrderDetail obj = new OrderDetail();
                obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t [INFO] SQL-shortcut
                obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t
                obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
                obj.setQuantity(rd.getValue(Integer.class, "Quantity"));  // t <- t
                obj.setDiscount(rd.getValue(Float.class, "Discount"));  // t <- t
                res.add(obj);
            }
        }, product_id);
        return res;
    }

    public List<Order> getOrdersByCustomer(String customer_id) throws Exception {
        String sql = "select * from Orders where CustomerID=?";
        final List<Order> res = new ArrayList<Order>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Order obj = new Order();
                obj.setOrderID(rd.getValue(Integer.class, "OrderID"));  // t <- t [INFO] SQL-shortcut
                obj.setCustomerID(rd.getValue(String.class, "CustomerID"));  // t <- t
                obj.setEmployeeID(rd.getValue(Integer.class, "EmployeeID"));  // t <- t
                obj.setOrderDate(rd.getValue(String.class, "OrderDate"));  // t <- t
                obj.setRequiredDate(rd.getValue(String.class, "RequiredDate"));  // t <- t
                obj.setShippedDate(rd.getValue(String.class, "ShippedDate"));  // t <- t
                obj.setFreight(rd.getValue(String.class, "Freight"));  // t <- t
                obj.setShipName(rd.getValue(String.class, "ShipName"));  // t <- t
                obj.setShipAddress(rd.getValue(String.class, "ShipAddress"));  // t <- t
                obj.setShipCity(rd.getValue(String.class, "ShipCity"));  // t <- t
                obj.setShipRegion(rd.getValue(String.class, "ShipRegion"));  // t <- t
                obj.setShipPostalCode(rd.getValue(String.class, "ShipPostalCode"));  // t <- t
                obj.setShipCountry(rd.getValue(String.class, "ShipCountry"));  // t <- t
                res.add(obj);
            }
        }, customer_id);
        return res;
    }

    public List<Product> getProductsBySupplier(Integer supplier_id) throws Exception {
        String sql = "select * from Products where SupplierID=?";
        final List<Product> res = new ArrayList<Product>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Product obj = new Product();
                obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t [INFO] SQL-shortcut
                obj.setProductName(rd.getValue(String.class, "ProductName"));  // t <- t
                obj.setSupplierID(rd.getValue(Integer.class, "SupplierID"));  // t <- t
                obj.setCategoryID(rd.getValue(Integer.class, "CategoryID"));  // t <- t
                obj.setQuantityPerUnit(rd.getValue(String.class, "QuantityPerUnit"));  // t <- t
                obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
                obj.setUnitsInStock(rd.getValue(Integer.class, "UnitsInStock"));  // t <- t
                obj.setUnitsOnOrder(rd.getValue(Integer.class, "UnitsOnOrder"));  // t <- t
                obj.setReorderLevel(rd.getValue(Integer.class, "ReorderLevel"));  // t <- t
                obj.setDiscontinued(rd.getValue(String.class, "Discontinued"));  // t <- t
                obj.setDiscontinuedDate(rd.getValue(String.class, "DiscontinuedDate"));  // t <- t
                res.add(obj);
            }
        }, supplier_id);
        return res;
    }

    public List<Product> getProductsByCategory(Integer category_id) throws Exception {
        String sql = "select * from Products where CategoryID=?";
        final List<Product> res = new ArrayList<Product>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Product obj = new Product();
                obj.setProductID(rd.getValue(Integer.class, "ProductID"));  // t <- t [INFO] SQL-shortcut
                obj.setProductName(rd.getValue(String.class, "ProductName"));  // t <- t
                obj.setSupplierID(rd.getValue(Integer.class, "SupplierID"));  // t <- t
                obj.setCategoryID(rd.getValue(Integer.class, "CategoryID"));  // t <- t
                obj.setQuantityPerUnit(rd.getValue(String.class, "QuantityPerUnit"));  // t <- t
                obj.setUnitPrice(rd.getValue(String.class, "UnitPrice"));  // t <- t
                obj.setUnitsInStock(rd.getValue(Integer.class, "UnitsInStock"));  // t <- t
                obj.setUnitsOnOrder(rd.getValue(Integer.class, "UnitsOnOrder"));  // t <- t
                obj.setReorderLevel(rd.getValue(Integer.class, "ReorderLevel"));  // t <- t
                obj.setDiscontinued(rd.getValue(String.class, "Discontinued"));  // t <- t
                obj.setDiscontinuedDate(rd.getValue(String.class, "DiscontinuedDate"));  // t <- t
                res.add(obj);
            }
        }, category_id);
        return res;
    }

    public List<Territory> getTerritoriesByRegion(Integer region_id) throws Exception {
        String sql = "select * from Territories where RegionID=?";
        final List<Territory> res = new ArrayList<Territory>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Territory obj = new Territory();
                obj.setTerritoryID(rd.getValue(Integer.class, "TerritoryID"));  // t <- t [INFO] SQL-shortcut
                obj.setTerritoryDescription(rd.getValue(String.class, "TerritoryDescription"));  // t <- t
                obj.setRegionID(rd.getValue(Integer.class, "RegionID"));  // t <- t
                res.add(obj);
            }
        }, region_id);
        return res;
    }
}