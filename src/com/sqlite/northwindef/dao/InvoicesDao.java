package com.sqlite.northwindef.dao;

import com.sqldalmaker.DataStore;

import com.sqlite.northwindef.dto.Invoice;
import java.util.ArrayList;
import java.util.List;

// This code was generated by a tool. Don't modify it manually.
// http://sqldalmaker.sourceforge.net

public class InvoicesDao {

    protected final DataStore ds;

    public InvoicesDao(DataStore ds) {
        this.ds = ds;
    }

    public List<Invoice> getInvoices() throws Exception {
        String sql = "SELECT DISTINCT" +
        "\n Orders.ShipName," +
        "\n Orders.ShipAddress," +
        "\n Orders.ShipCity," +
        "\n Orders.ShipRegion," +
        "\n Orders.ShipPostalCode," +
        "\n Orders.ShipCountry," +
        "\n Orders.CustomerID," +
        "\n Customers.CompanyName," +
        "\n Customers.Address," +
        "\n Customers.City," +
        "\n Customers.Region," +
        "\n Customers.PostalCode," +
        "\n Customers.Country," +
        "\n [FirstName] & \" \" & [LastName] AS Salesperson," +
        "\n Orders.OrderID," +
        "\n Orders.OrderDate," +
        "\n Orders.RequiredDate," +
        "\n Orders.ShippedDate," +
        "\n OrderDetails.ProductID," +
        "\n Products.ProductName," +
        "\n OrderDetails.UnitPrice," +
        "\n OrderDetails.Quantity," +
        "\n OrderDetails.Discount," +
        "\n (OrderDetails.[UnitPrice]*[Quantity]*(1-[Discount])/100)*100 AS ExtendedPrice," +
        "\n Orders.Freight" +
        "\n FROM (Products INNER JOIN ((Employees INNER JOIN (Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID) ON Employees.EmployeeID = Orders.EmployeeID) INNER JOIN [OrderDetails] ON Orders.OrderID = [OrderDetails].OrderID) ON Products.ProductID = [OrderDetails].ProductID);";
        final List<Invoice> res = new ArrayList<Invoice>();
        ds.queryAllRows(sql, new DataStore.RowHandler() {
            @Override
            public void handleRow(DataStore.RowData rd) throws Exception {
                Invoice obj = new Invoice();
                obj.setShipName(rd.getValue(Object.class, "ShipName"));  // q <- q
                obj.setShipAddress(rd.getValue(Object.class, "ShipAddress"));  // q <- q
                obj.setShipCity(rd.getValue(Object.class, "ShipCity"));  // q <- q
                obj.setShipRegion(rd.getValue(Object.class, "ShipRegion"));  // q <- q
                obj.setShipPostalCode(rd.getValue(Object.class, "ShipPostalCode"));  // q <- q
                obj.setShipCountry(rd.getValue(Object.class, "ShipCountry"));  // q <- q
                obj.setCustomerID1(rd.getValue(Object.class, "CustomerID:1"));  // q <- q
                obj.setCompanyName(rd.getValue(Object.class, "CompanyName"));  // q <- q
                obj.setAddress1(rd.getValue(Object.class, "Address:1"));  // q <- q
                obj.setCity1(rd.getValue(Object.class, "City:1"));  // q <- q
                obj.setRegion1(rd.getValue(Object.class, "Region:1"));  // q <- q
                obj.setPostalCode1(rd.getValue(Object.class, "PostalCode:1"));  // q <- q
                obj.setCountry1(rd.getValue(Object.class, "Country:1"));  // q <- q
                obj.setSalesperson(rd.getValue(Object.class, "Salesperson"));  // q <- q
                obj.setOrderID(rd.getValue(Object.class, "OrderID"));  // q <- q
                obj.setOrderDate(rd.getValue(Object.class, "OrderDate"));  // q <- q
                obj.setRequiredDate(rd.getValue(Object.class, "RequiredDate"));  // q <- q
                obj.setShippedDate(rd.getValue(Object.class, "ShippedDate"));  // q <- q
                obj.setProductID(rd.getValue(Object.class, "ProductID"));  // q <- q
                obj.setProductName(rd.getValue(Object.class, "ProductName"));  // q <- q
                obj.setUnitPrice(rd.getValue(Object.class, "UnitPrice"));  // q <- q
                obj.setQuantity(rd.getValue(Object.class, "Quantity"));  // q <- q
                obj.setDiscount(rd.getValue(Object.class, "Discount"));  // q <- q
                obj.setExtendedPrice(rd.getValue(Object.class, "ExtendedPrice"));  // q <- q
                obj.setFreight(rd.getValue(Object.class, "Freight"));  // q <- q
                res.add(obj);
            }
        });
        return res;
    }
}